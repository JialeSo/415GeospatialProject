{
  "hash": "525c95e3d0cd6de1770b1c1fc1788b49",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dynamic Jakarta & LTA Comprehensive Analysis Dashboard\"\nauthor: \"Your Name\"\ndate: \"2024-10-20\"\nformat: html\nexecute: \n  eval: false  # Toggle this to true for execution\n  freeze: auto\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- dashboardPage(\n  dashboardHeader(\n    color = \"blue\", \n    inverted = TRUE, \n    title = div(icon(\"chart bar\"), \"Jakarta & LTA EDA Dashboard\")\n  ),\n\n  dashboardSidebar(\n    size = \"thin\", \n    color = \"teal\",\n    sidebarMenu(\n      menuItem(\"EDA\", tabName = \"eda\", icon = icon(\"chart line\")),\n      menuItem(\"Data Preview\", tabName = \"data_preview\", icon = icon(\"table\")),\n      menuItem(\"Settings\", tabName = \"settings\", icon = icon(\"cogs\"))\n    )\n  ),\n\n  dashboardBody(\n    # Top Row with KPI Cards\n    fluidRow(\n      infoBoxOutput(\"total_trips\", width = 3),\n      infoBoxOutput(\"avg_duration\", width = 3),\n      infoBoxOutput(\"most_popular_mode\", width = 3),\n      infoBoxOutput(\"peak_hour\", width = 3)\n    ),\n\n    # Filters Row (Floating Filter Section)\n    fluidRow(\n      column(\n        width = 12,\n        box(\n          title = \"Filters\", color = \"blue\", ribbon = TRUE, width = 12,\n          checkboxGroupInput(\"transport_modes\", \"Select Transport Modes\", \n                             choices = c(\"Bus\", \"Train\", \"Bike\", \"Car\")),\n          dateRangeInput(\"daterange\", \"Select Date Range\", \n                         start = Sys.Date() - 30, end = Sys.Date()),\n          actionButton(\"apply_filters\", \"Apply Filters\", icon = icon(\"filter\")),\n          checkboxInput(\"dynamic_filters\", \"Enable Dynamic Filters\", value = FALSE)\n        )\n      )\n    ),\n\n    # Charts Section\n    fluidRow(\n      box(title = \"Trips Over Time\", color = \"blue\", width = 6, ribbon = TRUE, \n          plotOutput(\"trips_time_series\")),\n      box(title = \"Transport Mode Distribution\", color = \"green\", width = 6, ribbon = TRUE, \n          plotOutput(\"mode_distribution\"))\n    ),\n    \n    fluidRow(\n      box(title = \"Trip Duration Distribution\", color = \"purple\", width = 6, ribbon = TRUE, \n          plotOutput(\"duration_histogram\")),\n      box(title = \"Trips by Hour of Day\", color = \"orange\", width = 6, ribbon = TRUE, \n          plotOutput(\"hourly_trips\"))\n    )\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session) {\n  # Mock data (same structure as provided earlier)\n  mock_data <- data.frame(\n    trip_id = 1:100,\n    start_time = Sys.time() + seq(1, by = 60, length.out = 100),\n    end_time = Sys.time() + seq(601, by = 60, length.out = 100),\n    mode_of_transport = sample(c(\"Car\", \"Bus\", \"Bike\", \"Train\"), 100, replace = TRUE),\n    start_to_end_duration = sample(10:60, 100, replace = TRUE)\n  )\n\n  # Reactive data filtered based on inputs\n  filtered_data <- reactive({\n    data <- mock_data\n    if (!is.null(input$transport_modes)) {\n      data <- data[data$mode_of_transport %in% input$transport_modes, ]\n    }\n    if (!is.null(input$daterange)) {\n      data <- data[data$start_time >= input$daterange[1] & \n                     data$start_time <= input$daterange[2], ]\n    }\n    data\n  })\n\n  # Render plots based on filtered data\n  output$trips_time_series <- renderPlot({\n    filtered_data() %>%\n      mutate(date = as.Date(start_time)) %>%\n      count(date) %>%\n      ggplot(aes(x = date, y = n)) +\n      geom_line() +\n      theme_minimal()\n  })\n\n  output$mode_distribution <- renderPlot({\n    filtered_data() %>%\n      count(mode_of_transport) %>%\n      ggplot(aes(x = mode_of_transport, y = n, fill = mode_of_transport)) +\n      geom_bar(stat = \"identity\") +\n      theme_minimal()\n  })\n\n  output$duration_histogram <- renderPlot({\n    filtered_data() %>%\n      ggplot(aes(x = start_to_end_duration)) +\n      geom_histogram(binwidth = 5, fill = \"steelblue\", color = \"black\") +\n      theme_minimal()\n  })\n\n  output$hourly_trips <- renderPlot({\n    filtered_data() %>%\n      mutate(hour = as.integer(format(start_time, \"%H\"))) %>%\n      count(hour) %>%\n      ggplot(aes(x = hour, y = n)) +\n      geom_line() +\n      theme_minimal()\n  })\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}